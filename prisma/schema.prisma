// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id String @id @default(uuid())
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Courses[]

  enrollments Enrollment[]
  role        String?
  banned      Boolean?     @default(false)
  banReason   String?
  banExpires  DateTime?

  stripeCustomerId String? @unique

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Courses {
  id               String      @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel @default(Beginner)
  stripePriceId    String?     @unique @default(uuid())
  category         String
  smallDescription String
  slug             String      @unique

  status      CourseStatus @default(Draft)
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  chapters    Chapter[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Courses   Courses  @relation(fields: [coursesId], references: [id], onDelete: Cascade)
  coursesId String
  lessons   Lesson[]
}

model Lesson {
  id String @id @default(uuid())

  title          String
  description    String?
  thubnailUrlKey String?
  videoUrlKey    String?
  position       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String
}

model Enrollment {
  id     String           @id @default(uuid())
  amount Int
  status EnrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Courses   Courses  @relation(fields: [coursesId], references: [id], onDelete: Cascade)
  coursesId String

  @@unique([userId, coursesId])
}

enum EnrollmentStatus {
  Active
  Pending
  Cancelled
}
